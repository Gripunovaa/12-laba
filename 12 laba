#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <locale.h>

void main()
{
	setlocale(LC_ALL, "RUS");

	// ЗАДАНИЕ 1. Определите объем памяти, выделяемой под указатель на переменные типа char, int, double
	int* pi = NULL, i = 5;
	float* pf = NULL, f = 2.1f;
	printf("%lu\n", sizeof(pi));  // 8
	printf("%lu\n", sizeof(pf));  // 8
	puts("\n");


	// ЗАДАНИЕ 2. Проанализируйте приведенный ниже код. Объясните результат
	float PI = 3.14159, * p1 = NULL, * p2 = NULL;
	p1 = p2 = &PI;
	printf("По адресу p1=%x хранится *p1=%g\n", p1, *p1);
	printf("По адресу p2=%x хранится *p2=%g\n", p2, *p2);
	// указателям p1 и p2 мы присвоили адрес на одну и ту же переменную, поэтому совпадает как адрес, так и значение, выводимое по этому адресу
	puts("\n");


	// ЗАДАНИЕ 3. Определите, на сколько увеличится значение, на которое указывает ра. Полученные результаты поясните
	int* pa = NULL, x = 5;
	pa = &x;
	printf("По адресу %p хранится *ptr=%d\n", pa, *pa);   // тут должны быть d, а не g;  хранится 5
	pa++;
	printf("По адресу %p хранится *ptr=%d\n", pa, *pa);   // изменился адрес, хранится -858993460
	pa--;
	printf("По адресу %p хранится *ptr=%d\n", pa, *pa);  // адрес прежний, хранится 5
	// инкремент и декремент изменяют адрес, который хранится в указателе, на размер типа указателя (у нас int = 4 байта), т.е. перемещают к другому объекту в памяти
	printf("\n");


	// 3.1. измените тип данных на double
	double* pa_1 = NULL, y = 5;
	pa_1 = &y;
	printf("По адресу %x хранится *ptr=%lg\n", pa_1, *pa_1);   // 5
	pa_1++;
	printf("По адресу %x хранится *ptr=%lg\n", pa_1, *pa_1);   // -9,25596e+61
	pa_1--;
	printf("По адресу %x хранится *ptr=%lg\n", pa_1, *pa_1);  // 5
	// изменение адреса на 8 байт
	printf("\n");


	// 3.2. измените тип данных на char
	char* pa_2 = NULL, c = 'a';
	pa_2 = &c;
	printf("По адресу %x хранится *ptr=%c\n", pa_2, *pa_2);   // a
	pa_2++;
	printf("По адресу %x хранится *ptr=%c\n", pa_2, *pa_2);   // M
	pa_2--;
	printf("По адресу %x хранится *ptr=%c\n", pa_2, *pa_2);  // a
	// изменение адреса на 1 байт
	printf("\n");


	// 3.3. измените тип данных на long double
	long double* pa_3 = NULL, a = 5;
	pa_3 = &a;
	printf("По адресу %x хранится *ptr=%Lg\n", pa_3, *pa_3);   // 5
	pa_3++;
	printf("По адресу %x хранится *ptr=%Lg\n", pa_3, *pa_3);   // -9,25596e+61
	pa_3--;
	printf("По адресу %x хранится *ptr=%Lg\n", pa_3, *pa_3);  // 5
	// изменение адреса на 8 байт
	printf("\n");


	// 3.4. измените тип данных на short unsigned int
	short unsigned int* pa_4 = NULL, b = 5;
	pa_4 = &b;
	printf("По адресу %x хранится *ptr=%hu\n", pa_4, *pa_4);   // 5
	pa_4++;
	printf("По адресу %x хранится *ptr=%hu\n", pa_4, *pa_4);   // 52428
	pa_4--;
	printf("По адресу %x хранится *ptr=%hu\n", pa_4, *pa_4);  // 5
	// изменение адреса на 2 байта
	printf("\n");
}
